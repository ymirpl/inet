//
// Copyright (C) 2010 Philipp Berndt
// Copyright (C) 2000 Institut fuer Telematik, Universitaet Karlsruhe
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//

// Based on ../../nodes/inet/Router.ned

package inet.nodes.internetcloud;

import inet.base.NotificationBoard;
import inet.linklayer.IExternalNic;
import inet.linklayer.IWiredNic;
import inet.networklayer.arp.ARP;
import inet.networklayer.common.InterfaceTable;
import inet.networklayer.ipv4.ErrorHandling;
import inet.networklayer.ipv4.ICMP;
import inet.networklayer.ipv4.IPv4;
import inet.networklayer.ipv4.RoutingTable;
import inet.util.PcapRecorder;


//
// \InternetCloud
//
module InternetCloud
{
    parameters:
        @node();
        @labels(node,ethernet-node);
        @display("i=misc/cloud");
        int numExtInterfaces = default(0);
        int numPcapRecorders = default(0); // no of PcapRecorders.
        string routingFile = default("");
    gates:
        inout pppg[] @labels(PPPFrame-conn);
        inout ethg[] @labels(EtherFrame-conn);
    types:
        simple DelayGenerator
        {
            parameters:
                bool usePingErRttData = default(false);
                bool useAnalyticalRtt = default(false);
                bool usePingErJitter = default(false);
                bool usePingErPacketLoss = default(false);
                bool useAccessLatency = default(false);
                @display("i=block/delay");
            gates:
                input ipIn;
                output ipOut;
        }
        module InternetCloudNetworkLayer
        {
            parameters:
                bool proxyARP = default(true);
                bool usePingErRttData = default(false);
                bool useAnalyticalRtt = default(false);
                bool usePingErJitter = default(true);
                bool usePingErPacketLoss = default(false);
                bool useAccessLatency = default(false);
                @display("i=block/fork");
            gates:
                input ifIn[] @labels(IPDatagram);
                output ifOut[];
            submodules:
                ip: IPv4 {
                    parameters:
                        timeToLive = 32;
                        multicastTimeToLive = 32;
                        fragmentTimeout = 60s;
                        protocolMapping = "1:0,138:0";
                        @display("p=85,95;q=queue");
                    gates:
                        transportIn[1];
                        transportOut[1];
                        queueIn[sizeof(ifIn)];
                }

                delayGenerator: DelayGenerator {
                    parameters:
                        usePingErRttData = usePingErRttData;
                        useAnalyticalRtt = useAnalyticalRtt;
                        usePingErJitter = usePingErJitter;
                        usePingErPacketLoss = usePingErPacketLoss;
                        useAccessLatency = useAccessLatency;
                        @display("p=160,123");
                }
                arp: ARP {
                    parameters:
                        proxyARP = proxyARP;
                        @display("p=163,206;q=pendingQueue");
                    gates:
                        nicOut[sizeof(ifOut)];
                }
                icmp: ICMP {
                    parameters:
                        @display("p=160,33");
                }
                errorHandling: ErrorHandling {
                    parameters:
                        @display("p=239,33");
                }
            connections allowunconnected:
                // transport Layer
                ip.transportOut[0] --> icmp.localIn;
                ip.transportIn[0] <-- icmp.sendOut;

                icmp.errorOut --> errorHandling.in;

                ip.queueOut --> delayGenerator.ipIn;
                delayGenerator.ipOut --> arp.ipIn;

                // L2 interfaces to IP and from ARP
                for i=0..sizeof(ifOut)-1 {
                    ifIn[i] --> { @display("m=s"); } --> ip.queueIn[i];
                    ifOut[i] <-- { @display("m=s"); } <-- arp.nicOut[i];
                }
        }
    submodules:
        notificationBoard: NotificationBoard {
            parameters:
                @display("p=60,60");
        }
        interfaceTable: InterfaceTable {
            parameters:
                @display("p=60,131");
        }
        routingTable: RoutingTable {
            parameters:
                IPForward = true;
                routerId = "auto";
                routingFile = routingFile;
                @display("p=60,196");
        }
        pcapRecorder[numPcapRecorders]: PcapRecorder {
            @display("p=291,60");
        }
        networkLayer: InternetCloudNetworkLayer {
            parameters:
                @display("p=267,157;q=queue");
            gates:
                ifIn[sizeof(pppg)+sizeof(ethg)];
                ifOut[sizeof(pppg)+sizeof(ethg)];
        }
        ppp[sizeof(pppg)]: <default("PPPInterface")> like IWiredNic {
            parameters:
                @display("p=125,257,row,110;q=l2queue");
        }
        eth[sizeof(ethg)]: <default("EthernetInterface")> like IWiredNic {
            parameters:
                @display("p=267,257,row,110;q=l2queue");
        }
        ext[numExtInterfaces]: <default("ExtInterface")> like IExternalNic {
            parameters:
                @display("p=423,257,row,90;q=txQueue;i=block/ifcard");
        }
    connections allowunconnected:
        // connections to network outside
        for i=0..sizeof(pppg)-1 {
            pppg[i] <--> ppp[i].phys;
            ppp[i].netwOut --> networkLayer.ifIn[i];
            ppp[i].netwIn <-- networkLayer.ifOut[i];
        }

        for i=0..sizeof(ethg)-1 {
            ethg[i] <--> eth[i].phys;
            eth[i].netwOut --> networkLayer.ifIn[sizeof(pppg)+i];
            eth[i].netwIn <-- networkLayer.ifOut[sizeof(pppg)+i];
        }

        for i=0..numExtInterfaces-1 {
            ext[i].netwOut --> networkLayer.ifIn++;
            ext[i].netwIn <-- networkLayer.ifOut++;
        }
}

